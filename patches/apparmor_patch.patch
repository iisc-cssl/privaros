--- apparmor-2.13.2/parser/parser_lex.l	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/parser_lex.l	2020-08-03 23:55:56.000000000 +0530
@@ -247,6 +247,10 @@
 %x EXTCOND_MODE
 %x EXTCONDLIST_MODE
 %x NETWORK_MODE
+%x DOMAIN_MODE
+%x NET_DOMAIN_MODE
+%x IP_MODE
+%x IS_TRUSTED_MODE
 %x LIST_VAL_MODE
 %x LIST_COND_MODE
 %x LIST_COND_VAL
@@ -274,7 +278,7 @@
 	}
 %}
 
-<INITIAL,SUB_ID_WS,INCLUDE,INCLUDE_EXISTS,LIST_VAL_MODE,EXTCOND_MODE,LIST_COND_VAL,LIST_COND_PAREN_VAL,LIST_COND_MODE,EXTCONDLIST_MODE,ASSIGN_MODE,NETWORK_MODE,CHANGE_PROFILE_MODE,RLIMIT_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
+<INITIAL,SUB_ID_WS,INCLUDE,INCLUDE_EXISTS,LIST_VAL_MODE,EXTCOND_MODE,LIST_COND_VAL,LIST_COND_PAREN_VAL,LIST_COND_MODE,EXTCONDLIST_MODE,ASSIGN_MODE,NETWORK_MODE,DOMAIN_MODE,NET_DOMAIN_MODE,IP_MODE,IS_TRUSTED_MODE,CHANGE_PROFILE_MODE,RLIMIT_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
 	{WS}+	{  DUMP_PREPROCESS; /* Ignoring whitespace */ }
 }
 
@@ -481,6 +485,32 @@
 		RETURN_TOKEN(TOK_ID);
 	}
 }
+<DOMAIN_MODE>{
+	{IDS} {
+		yylval.id = strdup(yytext);
+		RETURN_TOKEN(TOK_ID);
+	}
+}
+<NET_DOMAIN_MODE>{
+	{IDS} {
+		yylval.id = strdup(yytext);
+		RETURN_TOKEN(TOK_ID);
+	}
+}
+
+<IP_MODE>{
+	{IP} {
+		yylval.ip = strdup(yytext);
+		RETURN_TOKEN(TOK_IP);
+	}
+}
+<IS_TRUSTED_MODE>{
+	{IDS} {
+		yylval.id = strdup(yytext);
+		RETURN_TOKEN(TOK_ID);
+	}
+}
+
 
 <CHANGE_PROFILE_MODE>{
 	safe		{ RETURN_TOKEN(TOK_SAFE); }
@@ -660,6 +690,20 @@
 	case TOK_NETWORK:
 		state = NETWORK_MODE;
 		break;
+	case TOK_DOMAIN_NAME:
+		state = DOMAIN_MODE;
+		break;
+	case TOK_NET_DOMAIN:
+		state = NET_DOMAIN_MODE;
+		break;
+	case TOK_ALLOWIP:
+		state = IP_MODE;
+		break;
+	case TOK_IS_TRUSTED:
+		state = IS_TRUSTED_MODE;
+		break;
+	
+
 	case TOK_CHANGE_PROFILE:
 		state = CHANGE_PROFILE_MODE;
 		break;
@@ -689,7 +733,7 @@
 	PUSH_AND_RETURN(state, token);
 }
 
-<INITIAL,NETWORK_MODE,RLIMIT_MODE,CHANGE_PROFILE_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
+<INITIAL,NETWORK_MODE,DOMAIN_MODE,NET_DOMAIN_MODE,IP_MODE,IS_TRUSTED_MODE,RLIMIT_MODE,CHANGE_PROFILE_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
 	{END_OF_RULE}	{
 		if (YY_START != INITIAL)
 			POP_NODUMP();
@@ -702,7 +746,7 @@
 	}
 }
 
-<INITIAL,SUB_ID,SUB_ID_WS,SUB_VALUE,LIST_VAL_MODE,EXTCOND_MODE,LIST_COND_VAL,LIST_COND_PAREN_VAL,LIST_COND_MODE,EXTCONDLIST_MODE,ASSIGN_MODE,NETWORK_MODE,CHANGE_PROFILE_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
+<INITIAL,SUB_ID,SUB_ID_WS,SUB_VALUE,LIST_VAL_MODE,EXTCOND_MODE,LIST_COND_VAL,LIST_COND_PAREN_VAL,LIST_COND_MODE,EXTCONDLIST_MODE,ASSIGN_MODE,NETWORK_MODE,DOMAIN_MODE,NET_DOMAIN_MODE,IP_MODE,IS_TRUSTED_MODE,CHANGE_PROFILE_MODE,MOUNT_MODE,DBUS_MODE,SIGNAL_MODE,PTRACE_MODE,UNIX_MODE>{
 	[^\n]	{
 		DUMP_PREPROCESS;
 		/* Something we didn't expect */
@@ -722,6 +766,10 @@
 	STATE_TABLE_ENT(EXTCOND_MODE),
 	STATE_TABLE_ENT(EXTCONDLIST_MODE),
 	STATE_TABLE_ENT(NETWORK_MODE),
+	STATE_TABLE_ENT(DOMAIN_MODE),
+	STATE_TABLE_ENT(NET_DOMAIN_MODE),
+	STATE_TABLE_ENT(IP_MODE),
+	STATE_TABLE_ENT(IS_TRUSTED_MODE),
 	STATE_TABLE_ENT(LIST_VAL_MODE),
 	STATE_TABLE_ENT(LIST_COND_MODE),
 	STATE_TABLE_ENT(LIST_COND_VAL),
--- apparmor-2.13.2/parser/parser_yacc.y	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/parser_yacc.y	2020-08-03 23:56:03.000000000 +0530
@@ -86,6 +86,7 @@
 %}
 
 %token TOK_ID
+%token TOK_IP
 %token TOK_CONDID
 %token TOK_CONDLISTID
 %token TOK_CARET
@@ -153,6 +154,11 @@
 %token TOK_TRACEDBY
 %token TOK_READBY
 %token TOK_ABI
+%token TOK_DOMAIN_NAME
+%token TOK_NET_DOMAIN
+%token TOK_ALLOWIP
+%token TOK_IS_TRUSTED
+
 
  /* rlimits */
 %token TOK_RLIMIT
@@ -192,6 +198,7 @@
 
 %union {
 	char *id;
+	char *ip;
 	char *flag_id;
 	char *mode;
 	struct aa_network_entry *network_entry;
@@ -217,11 +224,17 @@
 	struct cond_entry_list cond_entry_list;
 	int boolean;
 	struct prefixes prefix;
+	struct DomainMetaData *domain_meta_data;
+	struct ListOfDomains *list_of_domains;
+	struct ListOfIPAddrs *list_of_allowed_ip_addrs;
+	struct Is_Trusted_t *is_trusted_meta_data;
+
 }
 
 %type <id> 	TOK_ID
 %type <id>	TOK_CONDID
 %type <id>	TOK_CONDLISTID
+%type <ip> 	TOK_IP
 %type <mode> 	TOK_MODE
 %type <fmode>   file_mode
 %type <prof>	profile_base
@@ -282,6 +295,19 @@
 %type <id>	opt_named_transition
 %type <boolean> opt_exec_mode
 %type <boolean> opt_file
+
+%type <id>	TOK_DOMAIN_NAME
+%type <id>	TOK_NET_DOMAIN
+%type <id>	TOK_IS_TRUSTED
+
+%type <domain_meta_data> set_domain_rule
+%type <list_of_domains> net_domain_rule
+%type <list_of_allowed_ip_addrs> allow_ip_rule
+%type <is_trusted_meta_data> set_is_trusted_rule
+
+
+
+
 %%
 
 
@@ -293,6 +319,7 @@
 profilelist:	profilelist profile
 	{
 		PDEBUG("Matched: list profile\n");
+		printf ("profilelist: ns=%s, name=%s, attachment=%s\n", $2->ns, $2->name, $2->attachment);
 		add_to_list($2);
 	};
 
@@ -306,6 +333,9 @@
 opt_id_or_var: { /* nothing */ $$ = NULL; }
 	| id_or_var { $$ = $1; }
 
+/*
+	post_process_file_entries: helps in profile transition
+*/
 profile_base: TOK_ID opt_id_or_var flags TOK_OPEN rules TOK_CLOSE
 	{
 		Profile *prof = $5;
@@ -488,6 +518,7 @@
 
 valuelist:	TOK_VALUE
 	{
+		// printf("valuelist rule : received %s\n", $1);
 		struct value_list *val = new_value_list($1);
 		if (!val)
 			yyerror(_("Memory allocation error."));
@@ -498,6 +529,8 @@
 
 valuelist:	valuelist TOK_VALUE
 	{
+		// printf("valuelist rule : received %s\n", $2);
+		
 		struct value_list *val = new_value_list($2);
 		if (!val)
 			yyerror(_("Memory allocation error."));
@@ -613,12 +646,16 @@
 		if (!prof) {
 			yyerror(_("Memory allocation error."));
 		}
-
 		$$ = prof;
 	};
 
 rules: rules abi_rule { /* nothing */ }
 
+/* 
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	rule return struct cod_entry object, setting up bidirectional links to Profile 
+	
+*/
 rules:  rules opt_prefix rule
 	{
 		PDEBUG("matched: rules rule\n");
@@ -646,7 +683,10 @@
 		$$ = $1;
 	};
 
-
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	reversing prof4->entries list and merging with prof1->entries list
+*/
 rules: rules opt_prefix TOK_OPEN rules TOK_CLOSE
 	{
 		struct cod_entry *entry, *tmp;
@@ -682,6 +722,12 @@
 		$$ = $1;
 	};
 
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	network_rule: setting up struct aa_network_entry with either all (list of families), family, family + type
+	object
+	Adds: class unix_rule in Profile->rule_ents and sets up Profile->net
+*/
 rules: rules opt_prefix network_rule
 	{
 		struct aa_network_entry *entry, *tmp;
@@ -729,6 +775,10 @@
 
 		$$ = $1;
 	}
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up class mnt_rule object and adds to Profile->rule_ents
+*/
 
 rules:  rules opt_prefix mnt_rule
 	{
@@ -747,6 +797,12 @@
 		$$ = $1;
 	}
 
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up class dbus_rule object and adds to Profile->rule_ents
+	D-Bus is a system for interprocess communication (IPC)
+*/
+
 rules:  rules opt_prefix dbus_rule
 	{
 		if ($2.owner)
@@ -763,6 +819,12 @@
 		$$ = $1;
 	}
 
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up class signal_rule object and adds to Profile->rule_ents
+	
+*/
+
 rules:  rules opt_prefix signal_rule
 	{
 		if ($2.owner)
@@ -779,6 +841,11 @@
 		$$ = $1;
 	}
 
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up class ptrace_rule object and adds to Profile->rule_ents
+	
+*/
 rules:  rules opt_prefix ptrace_rule
 	{
 		if ($2.owner)
@@ -795,6 +862,11 @@
 		$$ = $1;
 	}
 
+/*
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up class unix_rule object and adds to Profile->rule_ents
+	
+*/
 rules:  rules opt_prefix unix_rule
 	{
 		if ($2.owner)
@@ -811,6 +883,11 @@
 		$$ = $1;
 	}
 
+/* 
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	change_profile: return struct cod_entry object, setting up bidirectional links to Profile 	
+*/
+
 rules:	rules opt_prefix change_profile
 	{
 		PDEBUG("matched: rules change_profile\n");
@@ -831,6 +908,10 @@
 		$$ = $1;
 	};
 
+/* 
+	opt_prefix sets up struct prefixes that contains allow, audit, deny
+	sets up Profile->caps which is some sort of mask value
+*/
 rules:  rules opt_prefix capability
 	{
 		if ($2.owner)
@@ -849,6 +930,18 @@
 
 		$$ = $1;
 	};
+/*
+	hats are special child profiles.
+	hat return Profile obj
+	hat's returned Profile sets its parent to rules Profile
+	i.e $2->parent = $1
+
+	“hats” are a local profile with some additional
+restrictions and an implicit rule allowing for change_hat to be used
+to transition to them.
+	 “hats” may not contain their own
+“hats”
+*/
 
 rules:	rules hat
 	{
@@ -859,6 +952,10 @@
 		$$ = $1;
 	};
 
+/*
+	 local profiles can contain their own local profiles and “hats”
+	 Local profiles that are not “hats” and can not be used with change_hat without an explicit hat rule.
+*/
 rules:	rules local_profile
 	{
 		PDEBUG("Matched: hat rule\n");
@@ -869,12 +966,18 @@
 		$$ = $1;
 	};
 
+/*
+	cond_rule: return a Profile from rules if expr is satisfied and merges two Profiles
+*/
 rules:	rules cond_rule
 	{
 		PDEBUG("Matched: conditional rules\n");
 		$$ = merge_policy($1, $2);
 	}
 
+/*
+	sets up Profile->rlimits
+*/
 rules: rules TOK_SET TOK_RLIMIT TOK_ID TOK_LE TOK_VALUE opt_id TOK_END_OF_RULE
 	{
 		rlim_t value = RLIM_INFINITY;
@@ -1066,6 +1169,7 @@
 		$$ = $2;
 	};
 
+/* file_rule will return struct cod_entry object */
 rule: file_rule { $$ = $1; }
 	| link_rule { $$ = $1; }
 
@@ -1152,6 +1256,181 @@
 		PDEBUG("rule.entry: link (%s)\n", entry->name);
 		$$ = entry;
 	};
+rules: rules set_domain_rule
+	{
+		if ($1->current_domain == NULL)
+			$1->current_domain = $2;
+		else
+		{
+			$1->current_domain->domain = $2->domain;
+			$1->current_domain->allow_cnt += $2->allow_cnt;
+			$1->current_domain->deny_cnt += $2->deny_cnt;
+		}
+		
+		$$ = $1;
+	}
+
+rules: rules set_is_trusted_rule
+	{
+		if ($1->current_domain == NULL)
+		{
+			struct DomainMetaData *new_entry;
+			new_entry = (struct DomainMetaData *) calloc(1, sizeof(struct DomainMetaData));
+			if (!new_entry)
+				yyerror(_("Memory allocation error."));
+			new_entry->domain = NULL;
+			new_entry->allow_cnt = 0;
+			new_entry->deny_cnt = 0;
+			$1->is_trusted_var = $2;
+		}
+		else
+		{
+			$1->is_trusted_var = $2;
+		}
+		$$ = $1;
+	}
+
+set_domain_rule: TOK_DOMAIN_NAME TOK_ID TOK_END_OF_RULE
+	{
+		struct DomainMetaData *new_entry;
+		new_entry = (struct DomainMetaData *) calloc(1, sizeof(struct DomainMetaData));
+		if (!new_entry)
+			yyerror(_("Memory allocation error."));
+		new_entry->domain = $2;
+		new_entry->allow_cnt = 0;
+		new_entry->deny_cnt = 0;
+		$$ = new_entry;
+	}
+set_is_trusted_rule: TOK_IS_TRUSTED TOK_ID TOK_END_OF_RULE
+	{
+		struct Is_Trusted_t *new_entry;
+		new_entry = (struct Is_Trusted_t *) calloc(1, sizeof(struct Is_Trusted_t));
+		if (!new_entry)
+			yyerror(_("Memory allocation error."));
+		new_entry->flag = $2;
+		$$ = new_entry;
+	}
+
+rules: rules opt_prefix net_domain_rule
+	{
+		if ($2.deny)
+		{
+			if ($1->deny_net_domains == NULL)
+				$1->deny_net_domains = $3;
+			else 
+			{
+				$3->next = $1->deny_net_domains;
+				$1->deny_net_domains = $3;
+			}
+			if ($1->current_domain == NULL)
+			{
+				struct DomainMetaData *new_entry;
+				new_entry = (struct DomainMetaData *) calloc(1, sizeof(struct DomainMetaData));
+				if (!new_entry)
+					yyerror(_("Memory allocation error."));
+				new_entry->domain = NULL;
+				new_entry->allow_cnt = 0;
+				new_entry->deny_cnt = 1;
+				new_entry->ip_allow_cnt = 0;
+				$1->current_domain = new_entry;
+			}
+			else
+			{
+				$1->current_domain->deny_cnt += 1;
+			}
+			
+		}
+		else
+		{
+			if ($1->allow_net_domains == NULL)
+				$1->allow_net_domains = $3;
+			else 
+			{
+				$3->next = $1->allow_net_domains;
+				$1->allow_net_domains = $3;
+			}
+
+			if ($1->current_domain == NULL)
+			{
+				struct DomainMetaData *new_entry;
+				new_entry = (struct DomainMetaData *) calloc(1, sizeof(struct DomainMetaData));
+				if (!new_entry)
+					yyerror(_("Memory allocation error."));
+				new_entry->domain = NULL;
+				new_entry->allow_cnt = 1;
+				new_entry->deny_cnt = 0;
+				new_entry->ip_allow_cnt = 0;
+				$1->current_domain = new_entry;
+			}
+			else
+			{
+				$1->current_domain->allow_cnt += 1;
+			}
+		}
+		$$ = $1;
+	}
+
+rules: rules allow_ip_rule
+	{
+		if($1->allowed_ip_addrs == NULL)
+		{
+			// List of allowed IP addrs is empty - this is the only case where address 0 must be added
+			$1->allowed_ip_addrs = $2;
+		}
+		else
+		{
+			// List of allowed IP addrs is not empty
+			// If incoming node's IP address or the existing list's head's IP address is 0, raise error
+			if($2->addr.s_addr == 0 || $1->allowed_ip_addrs->addr.s_addr == 0)
+			{
+				yyerror(_("IP Address 0.0.0.0 can be specified only once. If specified, the list of allowed IP addresses cannot contain any more"));
+			}
+			$2->next = $1->allowed_ip_addrs;
+			$1->allowed_ip_addrs = $2;
+		}
+		if ($1->current_domain == NULL)
+		{
+			struct DomainMetaData *new_entry;
+			new_entry = (struct DomainMetaData *) calloc(1, sizeof(struct DomainMetaData));
+			if (!new_entry)
+				yyerror(_("Memory allocation error."));
+			new_entry->domain = NULL;
+			new_entry->allow_cnt = 0;
+			new_entry->deny_cnt = 0;
+			new_entry->ip_allow_cnt = 1;
+			$1->current_domain = new_entry;
+		}
+		else
+		{
+			$1->current_domain->ip_allow_cnt += 1;
+		}
+		
+	}
+
+net_domain_rule: TOK_NET_DOMAIN TOK_ID TOK_END_OF_RULE
+	{
+		struct ListOfDomains *new_entry;
+		new_entry = (struct ListOfDomains *) calloc(1, sizeof(struct ListOfDomains));
+		if (!new_entry)
+			yyerror(_("Memory allocation error."));
+		new_entry->domain = $2;
+		new_entry->next = NULL;
+		$$ = new_entry;
+	}
+
+allow_ip_rule: TOK_ALLOWIP TOK_IP TOK_END_OF_RULE
+	{
+		struct ListOfIPAddrs *new_entry;
+		new_entry = (struct ListOfIPAddrs *) calloc(1, sizeof(struct ListOfIPAddrs));
+		if (!new_entry)
+			yyerror(_("Memory allocation error."));
+		if(inet_aton($2, &(new_entry->addr)) == 0)
+		{
+			yyerror(_("`%s' is not a valid ip address."), $2);
+		}
+		new_entry->next = NULL;
+		$$ = new_entry;
+	}
 
 network_rule: TOK_NETWORK TOK_END_OF_RULE
 	{
@@ -1391,6 +1670,7 @@
 				yyerror(_("unix rule: invalid conditional group %s=()"), $4.name);
 			free($4.name);
 		}
+		// printf ("unix_rule: conds->name=%s, peer-conds=%s\n", $3->name, $4->name);
 		ent = new unix_rule($2, $3, $4.list);
 		if (!ent) {
 			yyerror(_("Memory allocation error."));
@@ -1598,7 +1878,9 @@
 
 	exit(1);
 }
-
+/*
+	just setting up cod_entry object
+*/
 struct cod_entry *do_file_rule(char *id, int mode, char *link_id, char *nt)
 {
 		struct cod_entry *entry;
--- apparmor-2.13.2/parser/parser_misc.c	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/parser_misc.c	2020-08-03 23:55:58.000000000 +0530
@@ -69,6 +69,10 @@
 static struct keyword_table keyword_table[] = {
 	/* network */
 	{"network",		TOK_NETWORK},
+	{"dte_domain",		TOK_DOMAIN_NAME},
+	{"dte_net_domain",		TOK_NET_DOMAIN},
+	{"allowip",	TOK_ALLOWIP},
+	{"is_trusted",		TOK_IS_TRUSTED},
 	{"unix",		TOK_UNIX},
 	/* misc keywords */
 	{"capability",		TOK_CAPABILITY},
@@ -667,6 +671,7 @@
 bool parse_label(bool *_stack, char **_ns, char **_name,
 		 const char *label, bool yyerr)
 {
+	
 	const char *err = NULL;
 	char *ns = NULL;
 	char *name = NULL;
@@ -675,6 +680,7 @@
 	int res;
 
 	res = _parse_label(_stack, &ns, &ns_len, &name, &name_len, label);
+	printf ("parse_label: label=%s, ns=%s, name=%s\n", label, ns, name);
 	if (res == 1) {
 		err = _("Namespace not terminated: %s\n");
 	} else if (res == 2) {
@@ -818,6 +824,7 @@
 			printf(" change_profile");
 		if (HAS_EXEC_UNSAFE(item->mode))
 			printf(" unsafe");
+			
 		debug_base_perm_mask(SHIFT_TO_BASE(item->mode, AA_USER_SHIFT));
 		printf(":");
 		debug_base_perm_mask(SHIFT_TO_BASE(item->mode, AA_OTHER_SHIFT));
--- apparmor-2.13.2/parser/parser_interface.c	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/parser_interface.c	2020-08-03 23:55:59.000000000 +0530
@@ -87,12 +87,15 @@
 int load_profile(int option, aa_kernel_interface *kernel_interface,
 		 Profile *prof, int cache_fd)
 {
+	
 	int retval = 0;
 	int error = 0;
 
 	PDEBUG("Serializing policy for %s.\n", prof->name);
+	
+	
 	retval = __sd_serialize_profile(option, kernel_interface, prof, cache_fd);
-
+	
 	if (retval < 0) {
 		error = retval;	/* yeah, we'll just report the last error */
 		switch (option) {
@@ -192,6 +195,7 @@
 
 static inline void sd_write8(std::ostringstream &buf, u8 b)
 {
+	
 	buf.write((const char *) &b, 1);
 }
 
@@ -205,6 +209,7 @@
 static inline void sd_write32(std::ostringstream &buf, u32 b)
 {
 	u32 tmp;
+	
 	tmp = cpu_to_le32(b);
 	buf.write((const char *) &tmp, 4);
 }
@@ -212,6 +217,9 @@
 static inline void sd_write64(std::ostringstream &buf, u64 b)
 {
 	u64 tmp;
+	printf ("sd_write64: b=%d\n", b);
+	printf ("sd_write64: b=%x\n", b);
+	
 	tmp = cpu_to_le64(b);
 	buf.write((const char *) &tmp, 8);
 }
@@ -395,12 +403,78 @@
 		}
 	}
 
+	if (profile->current_domain != NULL)
+	{
+		sd_write_struct(buf, "DomainMetaData");
+		sd_write_string(buf, profile->current_domain->domain, NULL);
+		sd_write_uint32(buf,  profile->current_domain->allow_cnt);
+		sd_write_uint32(buf,  profile->current_domain->deny_cnt);
+		sd_write_uint32(buf, profile->current_domain->ip_allow_cnt);
+		sd_write_structend(buf);
+		if (profile->current_domain->allow_cnt > 0)
+		{
+			sd_write_struct(buf, "AllowedDomains");
+			struct ListOfDomains *tmp = profile->allow_net_domains;
+			while (tmp != NULL)
+			{
+				sd_write_string(buf, tmp->domain, NULL);
+				tmp = tmp->next;
+			}
+			sd_write_structend(buf);
+		}
+
+
+		if (profile->current_domain->deny_cnt > 0)
+		{
+			sd_write_struct(buf, "DenyedDomains");
+			struct ListOfDomains *tmp = profile->deny_net_domains;
+			while (tmp != NULL)
+			{
+				sd_write_string(buf, tmp->domain, NULL);
+				tmp = tmp->next;
+			}
+			sd_write_structend(buf);
+		}
+
+		if(profile->current_domain->ip_allow_cnt > 0)
+		{
+			sd_write_struct(buf, "AllowedIPAddrs");
+			struct ListOfIPAddrs *tmp = profile->allowed_ip_addrs;
+			while(tmp != NULL)
+			{
+				sd_write_uint32(buf, tmp->addr.s_addr);
+				tmp = tmp->next;
+			}
+			sd_write_structend(buf);
+		}
+		if(profile->is_trusted_var != NULL)
+		{
+			sd_write_struct(buf, "ISTrusted");
+			sd_write_string(buf, profile->is_trusted_var->flag, NULL);
+			sd_write_structend(buf);
+		}
+		else
+		{
+			sd_write_struct(buf, "ISTrusted");
+			sd_write_string(buf, "false", NULL);
+			sd_write_structend(buf);
+		}
+		
+	}
+
+
+
+
+
 	sd_write_struct(buf, "flags");
 	/* used to be flags.debug, but that's no longer supported */
 	sd_write_uint32(buf, profile->flags.hat);
 	sd_write_uint32(buf, profile->flags.complain);
 	sd_write_uint32(buf, profile->flags.audit);
 	sd_write_structend(buf);
+
+
+
 	if (profile->flags.path) {
 		int flags = 0;
 		if (profile->flags.path & PATH_CHROOT_REL)
@@ -458,6 +532,8 @@
 	sd_serialize_xtable(buf, profile->exec_table);
 
 	sd_write_structend(buf);
+
+		
 }
 
 void sd_serialize_top_profile(std::ostringstream &buf, Profile *profile)
@@ -483,7 +559,6 @@
 	autoclose int fd = -1;
 	int error, size, wsize;
 	std::ostringstream work_area;
-
 	switch (option) {
 	case OPTION_ADD:
 	case OPTION_REPLACE:
@@ -525,24 +600,39 @@
 		std::string tmp;
 
 		sd_serialize_top_profile(work_area, prof);
-
 		tmp = work_area.str();
+		
+		// printf ("__sd_serialize_profile: kernel_load=%d, buffer_len=%d\n", kernel_load, tmp.length());
+		//size_t size_2 = sizeof(tmp.c_str()); /* or however much you're planning to write */
+		// fwrite(tmp.c_str(), 1, tmp.length(), stdout);
+		// printf("\n");
 		size = (long) work_area.tellp();
+		printf ("size of serialized data=%d\n", size);
 		if (kernel_load) {
-			if (option == OPTION_ADD &&
-			    aa_kernel_interface_load_policy(kernel_interface,
-							    tmp.c_str(), size) == -1) {
-				error = -errno;
+			// printf ("__sd_serialize_profile: inside kernel_load, option value=%d\n", option);
+			if (option == OPTION_ADD ) 
+			{
+				// printf ("__sd_serialize_profile: inside option_add\n");
+				if (aa_kernel_interface_load_policy(kernel_interface,
+							    tmp.c_str(), size) == -1)
+
+					error = -errno;
+				// else
+				// 	printf ("__sd_serialize_profile: inside option_add, else part\n");
+				
 			} else if (option == OPTION_REPLACE &&
 				   aa_kernel_interface_replace_policy(kernel_interface,
 								      tmp.c_str(), size) == -1) {
 				error = -errno;
 			}
+			// else 
+			// 	printf ("__sd_serialize_profile: none of the above were executed\n");
 		} else if ((option == OPTION_STDOUT || option == OPTION_OFILE) &&
 			   aa_kernel_interface_write_policy(fd, tmp.c_str(), size) == -1) {
 			error = -errno;
 		}
-
+		// printf ("__sd_serialize_profile: after kernel_load\n");
+			
 		if (cache_fd != -1) {
 			wsize = write(cache_fd, tmp.c_str(), size);
 			if (wsize < 0) {
--- apparmor-2.13.2/parser/profile.h	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/profile.h	2020-08-03 23:56:05.000000000 +0530
@@ -110,38 +110,84 @@
 	dfa_stuff(void): rules(NULL), dfa(NULL), size(0) { }
 };
 
+struct ListOfDomains
+{
+	char *domain;
+	struct ListOfDomains *next;
+};
+
+
+struct DomainMetaData
+{
+	char *domain;
+	int allow_cnt;
+	int deny_cnt;
+	int ip_allow_cnt;
+};
+struct Is_Trusted_t
+{
+	char *flag;
+};
+
 class Profile {
 public:
+	//profile_base
 	char *ns;
+	//profile_base
 	char *name;
+
+	//sets inside profile_base:
 	char *attachment;
 	struct alt_name *altnames;
+
+	//inside parser_regex->process_profile_name_xmatch
 	void *xmatch;
 	size_t xmatch_size;
 	int xmatch_len;
 
 	/* char *sub_name; */			/* subdomain name or NULL */
 	/* int default_deny; */			/* TRUE or FALSE */
+	//sets inside local_profile:
 	int local;
 	int local_mode;				/* true if local, not hat */
 	int local_audit;
 
+	//sets inside hats: | local_profile:
 	Profile *parent;
 
+	//profile_base, profile, hat
 	flagvals flags;
+
+	//capability
 	struct capabilities caps;
+
+	//network_rule
 	struct network net;
 
+	//sets inside last rules:
 	struct aa_rlimits rlimits;
 
 	char *exec_table[AA_EXEC_COUNT];
+
+	//rule, change_profile
 	struct cod_entry *entries;
+	
+	//network_rule, mnt_rule, dbus_rule, signal_rule, ptrace_rule, unix_rule
 	RuleList rule_ents;
 
 	ProfileList hat_table;
 
+	//inside parser_regex -> process_profile_regex
+	//is filled inside process_profile_regex
 	struct dfa_stuff dfa;
+	//inside parser_regex -> process_profile_policydb
 	struct dfa_stuff policy;
+	
+	struct DomainMetaData *current_domain;
+	struct ListOfDomains *allow_net_domains;
+	struct ListOfDomains *deny_net_domains;
+	struct ListOfIPAddrs *allowed_ip_addrs;
+	struct Is_Trusted_t *is_trusted_var;
 
 	Profile(void)
 	{
@@ -161,6 +207,9 @@
 		std::fill(exec_table, exec_table + AA_EXEC_COUNT, (char *)NULL);
 
 		entries = NULL;
+		current_domain = NULL;
+		allow_net_domains = NULL;
+		deny_net_domains = NULL;
 	};
 
 	virtual ~Profile();
@@ -195,20 +244,29 @@
 			else
 				printf("Local To:\t<NULL>\n");
 		}
-
+		printf ("flags------------------------------\n");
 		flags.dump();
+		printf ("caps------------------------------\n");
 		caps.dump();
+		printf ("net------------------------------\n");
 		net.dump();
-
+		printf ("cod_entries------------------------------\n");
 		if (entries)
 			debug_cod_entries(entries);
-
+		printf ("rulelist------------------------------\n");
 		for (RuleList::iterator i = rule_ents.begin(); i != rule_ents.end(); i++) {
 			(*i)->dump(cout);
 		}
-
+		
 		printf("\n");
+		printf ("hat_table------------------------------\n");
 		hat_table.dump();
+		printf ("exec_table------------------------------\n");
+		for(int i = 0; i < AA_EXEC_COUNT; i++)
+		{
+			printf ("%s\n", exec_table[i]);
+		}
+		
 	}
 
 	bool alloc_net_table();
--- apparmor-2.13.2/parser/network.h	2018-12-21 16:46:02.000000000 +0530
+++ privaros_apparmor/parser/network.h	2020-02-03 16:20:29.000000000 +0530
@@ -91,6 +91,11 @@
 	struct aa_network_entry *next;
 };
 
+struct ListOfIPAddrs {
+	struct in_addr addr;
+	struct ListOfIPAddrs *next;
+};
+
 int parse_net_mode(const char *str_mode, int *mode, int fail);
 extern struct aa_network_entry *new_network_ent(unsigned int family,
 						unsigned int type,

